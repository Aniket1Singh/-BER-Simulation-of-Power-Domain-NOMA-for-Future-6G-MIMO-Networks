function run_MIMONOMA_GUI
    % Create UI Figure
    fig = uifigure('Name', 'MIMO-NOMA BER Simulator', ...
                   'Position', [100 100 1050 640], ...
                   'Color', [0.9 0.95 1]);

    % Title and Subtitle
    uilabel(fig, 'Text', ' BER Simulation of Power-Domain NOMA for Future 6G MIMO Networks', ...
        'FontSize', 19, 'FontWeight', 'bold', 'FontColor', [0 0 0.6], ...
        'Position', [80 590 900 30]);

    uilabel(fig, 'Text', '— A Visual BER Analysis Tool —', ...
        'FontSize', 14, 'FontAngle', 'italic', ...
        'Position', [390 565 300 25]);

    uilabel(fig, 'Text', 'by Aniket Singh', ...
        'FontSize', 13, 'FontWeight', 'bold', ...
        'Position', [440 540 200 20]);

    % Input Panel
    panel = uipanel(fig, ...
        'Title', 'Simulation Parameters', ...
        'FontSize', 13, ...
        'Position', [40 320 360 200], ...
        'BackgroundColor', [0.95 0.97 1]);

    % Input Fields
    uilabel(panel, 'Text', 'SNR Range (e.g. 0:5:30):', ...
        'Position', [10 130 180 22]);
    tf_snr = uieditfield(panel, 'text', ...
        'Position', [200 130 140 22], ...
        'Value', '0:5:30');

    uilabel(panel, 'Text', ' Number of Users (even):', ...
        'Position', [10 90 180 22]);
    tf_users = uieditfield(panel, 'numeric', ...
        'Position', [200 90 140 22], ...
        'Value', 6);

    uilabel(panel, 'Text', ' Power to Weak User (0.5–0.9):', ...
        'Position', [10 50 200 22]);
    tf_pw = uieditfield(panel, 'numeric', ...
        'Position', [200 50 140 22], ...
        'Value', 0.7);

    % Axes for Plot
    ax = uiaxes(fig, 'Position', [430 230 580 280]);
    title(ax, 'BER vs SNR for MIMO-NOMA with SIC');
    xlabel(ax, 'SNR (dB)'); ylabel(ax, 'Bit Error Rate (BER)');
    grid(ax, 'on');

    % Table for Results
    tbl = uitable(fig, ...
        'Position', [230 20 600 180], ...
        'ColumnName', {'SNR (dB)', 'Weak BER', 'Strong BER'}, ...
        'Data', zeros(0, 3), ...
        'ColumnWidth', {'auto', 'auto', 'auto'}, ...
        'RowStriping', 'on');

    % Buttons
    uibutton(fig, 'Text', ' Run Simulation', ...
        'Position', [120 280 160 32], ...
        'FontWeight', 'bold', 'FontColor', 'w', ...
        'BackgroundColor', [0.2 0.4 1], ...
        'ButtonPushedFcn', @(~, ~) simulateWithProgress(tf_snr.Value, ax, tbl, fig, tf_users.Value, tf_pw.Value));

    uibutton(fig, 'Text', ' Export to Excel', ...
        'Position', [850 565 130 26], ...
        'ButtonPushedFcn', @(~, ~) exportToExcel(tbl));

    uibutton(fig, 'Text', 'Save Plot as PNG', ...
        'Position', [850 530 130 26], ...
        'ButtonPushedFcn', @(~, ~) exportPlot(ax));
end

function simulateWithProgress(snrStr, ax, tbl, fig, users, pw)
    d = uiprogressdlg(fig, ...
        'Title', 'Simulating...', ...
        'Message', 'Running Monte Carlo simulations...', ...
        'Indeterminate', 'on');
    drawnow;
    runSimulation(snrStr, ax, tbl, fig, users, pw);
    close(d);
end

function exportToExcel(tbl)
    data = tbl.Data;
    T = array2table(data, 'VariableNames', {'SNR_dB', 'Weak_BER', 'Strong_BER'});
    writetable(T, 'BER_results.xlsx');
    uialert(gcbf, 'Exported to BER_results.xlsx', 'Success');
end

function exportPlot(ax)
    [file, path] = uiputfile('BER_plot.png', 'Save Plot As');
    if isequal(file, 0)
        return;
    end
    exportgraphics(ax, fullfile(path, file), 'Resolution', 300);
    uialert(gcbf, 'Plot saved as PNG successfully!', 'Saved');
end
